/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package numeric_puzzle;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import java.util.Random;
/**
 *
 * @author computec
 */
//public class CustomTableModel extends DefaultTableModel
//{
//    @Override
//    public boolean isCellEditable(int row, int column)
//    {
//        return false;
//    }
//}

public class frm_numeric_puzzle extends javax.swing.JFrame {

    /**
     * Creates new form frm_numeric_puzzle
     */
    public frm_numeric_puzzle() {
        initComponents();
        iniciar_spinner();
        Generar();
    }
    
    void iniciar_spinner()
    {
        SpinnerNumberModel nm = new SpinnerNumberModel();
        nm.setMinimum(3);
        nm.setMaximum(6);
        nm.setValue(3);
        this.jsp_dimension.setModel(nm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jsp_dimension = new javax.swing.JSpinner();
        btn_iniciar_juego = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_puzzle = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Seleccionar Dimension");

        btn_iniciar_juego.setText("Iniciar Juego");
        btn_iniciar_juego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_iniciar_juegoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Puzzle Numerico");

        tbl_puzzle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tbl_puzzle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_puzzle.setRowHeight(25);
        tbl_puzzle.setTableHeader(null);
        tbl_puzzle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_puzzleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_puzzle);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jsp_dimension, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btn_iniciar_juego)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jsp_dimension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_iniciar_juego))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int[][] Matriz;
    DefaultTableModel modelo;
    
    private void btn_iniciar_juegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_iniciar_juegoActionPerformed
        Generar();
    }//GEN-LAST:event_btn_iniciar_juegoActionPerformed

    private void tbl_puzzleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_puzzleMouseClicked
        int a = tbl_puzzle.rowAtPoint(evt.getPoint());
        int b = tbl_puzzle.columnAtPoint(evt.getPoint());
        movimientos(a,b);
    }//GEN-LAST:event_tbl_puzzleMouseClicked

    public void conversion()
    {
        String s ="";
        double d ;
        int a;
        d = Double.parseDouble(s);
        a = Integer.parseInt(s);
        s = String.valueOf(a);
        s = String.valueOf(d);
    }
    
    public boolean isCellEditable(int row, int column)
    {
        return false;
    }
    
    public void Generar()
        {
            
            int FilCol = Integer.parseInt(jsp_dimension.getValue().toString());
            modelo = (DefaultTableModel) tbl_puzzle.getModel();
            
            modelo.setColumnCount(0);
            modelo.setRowCount(0);
            agregarColumnas();
            
            Matriz = new int[FilCol][FilCol];
            
            tbl_puzzle.setRowHeight((380/Integer.parseInt(jsp_dimension.getValue().toString()))- 1);
            GeneraPuzzle();
        }
    
    public void agregarColumnas()
    {
        for(int i = 0; i < Integer.parseInt(jsp_dimension.getValue().toString()); i++)
        {
            modelo.addColumn("*");
        }
    }
    
    public void Presentar()
    {
        for(int a = 0; a < Integer.parseInt(jsp_dimension.getValue().toString()); a++)
        {
            for(int b = 0; b < Integer.parseInt(jsp_dimension.getValue().toString()); b++)
            {
                if(Matriz[a][b] == 0)
                {
                    tbl_puzzle.setValueAt("", a, b);
                }
                else
                {
                    tbl_puzzle.setValueAt(Matriz[a][b], a, b);
                }
            }
        }
                
        
    }
    
    public void GeneraPuzzle()
    {
            Random rnd = new Random();
            int cont = 0, dimension = Integer.parseInt(jsp_dimension.getValue().toString()) * Integer.parseInt(jsp_dimension.getValue().toString());
            int[] noRepetir = new int[dimension];
            // llenado de la matriz
            for (int a = 0; a < Integer.parseInt(jsp_dimension.getValue().toString()); a++)
            {
                this.modelo.addRow(new Object[]{"","",""});
                for (int b = 0; b < Integer.parseInt(jsp_dimension.getValue().toString()); b++)
                {
                    if (a == Integer.parseInt(jsp_dimension.getValue().toString()) - 1 && b == Integer.parseInt(jsp_dimension.getValue().toString()) - 1)
                    {
                        tbl_puzzle.setValueAt("", a, b);
                        //dgv_puzzle.Rows[a].Cells[b].Style.BackColor = Color.White;
                    }
                    else
                    {
                        Matriz[a][b] = (int)(rnd.nextDouble() * dimension);
                        noRepetir[cont] = Matriz[a][b];
                        // for para no repetir valores.... compara con los elementos anteriores...
                        for (int kv = 0; kv < cont || noRepetir[cont] == 0; kv++)
                        {
                            if (noRepetir[cont] == noRepetir[kv] || noRepetir[cont] == 0) 
                            {
                                Matriz[a][b] = (int)(rnd.nextDouble() * dimension);
                                noRepetir[cont] = Matriz[a][b];
                                kv = -1;
                            }
                        }
                        //JOptionPane.showMessageDialog(null, String.valueOf(Matriz[a][b]));
                        cont++;
                        tbl_puzzle.setValueAt(String.valueOf(Matriz[a][b]), a, b);

                        
                        //tbl_puzzle.isCellEditable(a, b);
//                        dgv_puzzle.Rows[a].Cells[b].Style.BackColor = Color.Yellow;
                    }
                }
            }
    }
    
    
    
    public void movimientos(int a, int b)
        {
            int x = 0;
            
            //int a = dgv_puzzle.CurrentCell.RowIndex, b = dgv_puzzle.CurrentCell.ColumnIndex;
            //int a = 0, b = 0;
            if (a == 0)
            {
                if (b == 0)
                {
                    if (Matriz[a][b + 1] == 0)
                    { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a + 1][b] == 0)
                    { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                }
                else if (b == Matriz[a].length - 1)
                {
                    if (Matriz[a][b - 1] == 0)
                    { x = Matriz[a][b - 1]; Matriz[a][b - 1] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a + 1][b] == 0)
                    { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                }
                else
                {
                    if (Matriz[a][b + 1] == 0)
                    { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a + 1][b] == 0)
                    { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a][b - 1] == 0)
                    { x = Matriz[a][b - 1]; Matriz[a][b  - 1] = Matriz[a][b]; Matriz[a][b] = x; }
                }
            }
            else if (a == Matriz.length - 1)
            {
                if (b == 0)
                {
                    if (Matriz[a - 1][b] == 0)
                    { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a][b + 1] == 0)
                    { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                }
                else if (b == Matriz[a].length - 1)
                {
                    if (Matriz[a][b - 1] == 0)
                    { x = Matriz[a][b - 1]; Matriz[a][b - 1] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a - 1][b] == 0)
                    { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                }
                else
                {
                    if (Matriz[a - 1][b] == 0)
                    { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a][b + 1] == 0)
                    { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                    else if (Matriz[a][b - 1] == 0)
                    { x = Matriz[a][b - 1]; Matriz[a][b - 1] = Matriz[a][b]; Matriz[a][b] = x; }
                }
            }
            else if (b == 0)
            {
                if (Matriz[a - 1][b] == 0)
                { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a][b + 1] == 0)
                { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a + 1][b] == 0)
                { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
            }
            else if (b == Matriz[a].length - 1)
            {
                if (Matriz[a - 1][b] == 0)
                { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                 else if (Matriz[a + 1][b] == 0)
                { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a][b - 1] == 0)
                { x = Matriz[a][b - 1]; Matriz[a][b - 1] = Matriz[a][b]; Matriz[a][b] = x; }
            }
            else
            {
                if (Matriz[a - 1][b] == 0)
                { x = Matriz[a - 1][b]; Matriz[a - 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a][b + 1] == 0)
                { x = Matriz[a][b + 1]; Matriz[a][b + 1] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a + 1][b] == 0)
                { x = Matriz[a + 1][b]; Matriz[a + 1][b] = Matriz[a][b]; Matriz[a][b] = x; }
                else if (Matriz[a][b - 1] == 0)
                { x = Matriz[a][b - 1]; Matriz[a][b - 1] = Matriz[a][b]; Matriz[a][b] = x; }
            }
            Presentar();
            Ganar();
        }
    
    
    public void Ganar()
        {
            int m = 0;
            for (int i = 0; i < Matriz.length; i++)
            {
                for (int j = 0; j < Matriz[i].length; j++)
                {
                    if (i == (Matriz.length - 1) && j == (Matriz[i].length - 1))
                    { }
                    else if (Matriz[i][j] != i * ((Matriz.length-1) + 1) + j + 1)
                    { m++; }
                }
            }
            if (m == 0)
            {
                JOptionPane.showMessageDialog(null, "Has ganado parcero/a");
//                DialogResult result = MessageBox.Show(">>Has Ganado<<  Desea volver a jugar .... Presione No para salir", "HAS GANADO WEY", MessageBoxButtons.YesNo);
//                if (result == DialogResult.Yes)
//                { Generar(); }
//                else
//                { this.Close(); }
            }

        }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_numeric_puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_numeric_puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_numeric_puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_numeric_puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_numeric_puzzle().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_iniciar_juego;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jsp_dimension;
    private javax.swing.JTable tbl_puzzle;
    // End of variables declaration//GEN-END:variables
}
